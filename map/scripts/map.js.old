/*
*
*/



// TO DO


// ----------- Isle of man
// find a geojson four JUST the isle of man
// or do an if loop to exclude dirty data - 498 instead of 500 towns?

// ----------- London names
// do an if loop for London values

// ----------- Andy vs UK GeoJSON county names
// FIX LONDON - parse the LHS of Andy county name, if greater london, call it Outer London...??
// Misc areas not defined according to Andy's data - peterborough vs cambridge etc.

// ----------- CHOROPLETH RANGE
// need to add more vlaues for RGB into the choropleth range (line 105)
// Possible up to 50 (what if someone chooses 500 towns!)
// make dynamic? - so number of towns div 10?

// ------------ SVG ABS
// Use to define the total size of circles - completely dynamic scaling when zooming?

// ------------ ZOOMING?!

// ------------ BUTTONS for interaction
// Update, N_Towns, Zoom/Scale

// ------------ FORMATTING
// Get long + lat tool tip formatted properly

// ------------ County tooltip?


// ---------------------------------------------------------------------------------------------------------------------
// GLOBAL VARIABLES
// --------------------------------------------------------------

// ---- VARIABLES FOR TESTING PURPOSES

N_Towns = 50;
datasetUK =  "geocommons/317243-counties.json";
datasetTowns = "http://ac32007.cloudapp.net:8080/Circles/Towns/" + N_Towns;

// ---- static variable declarations

inittime = 1000;																					// wait time when page loads
refreshtime = 5000;
dancingtime=10000;
refresh_trans_duration = 5000;
init_tran_duration = 5500																	// initial animation transition duration (not using atm)

gr = 1.61803398875;																				// golden ratio to make sure everything is in proportion always
z = 0;																								// counter for nesting - REMOVE?!?!
dataIter = 0;																						// make sure dataIter value set to Zero to start (just in case)
MaxCountyPop = 0;																					// make sure MaxCountyPop set to zero at start

// ----- related / dynamic variable declarations

svgwidth_abs = 600;																				// defines the abs width of the SVG area

svgheight_abs = svgwidth_abs*gr;																// SVG width * GR = nice looking proportional height
svgmargin =	{top:30,right:20,bottom:30,left:20};										// margins so not touching edge of page
svgpadding = 20;																					// padding var - if needed
svgwidth_rel = svgwidth_abs - svgmargin.left - svgmargin.right;						// minus out the margin values fro abs SVG values
svgheight_rel = svgheight_abs - svgmargin.top - svgmargin.bottom;					// minus out the margin values fro abs SVG values

tooltippadding = 60;																				// padding for tool tips to ensure not directly over area looking at
titlepad = 170;
scalepadding = 50;

opacitycounties_max = 1;																		// maximum opacity for COUNTY POLYGONS when mouseover
opacitycounties_min = 0.5;																		// minimum opacity for COUNTY POLYGONS when mouseover
opacitycirclesmax = 0.5;																		// maximum opacity for CIRCLES when mouseover
opacitycirclesmin = 0.1;																		// minimum opacity for CIRCLES when mouseover
opacdel = 150;																						// static delay for all opacity transitions
opacityduration = 2000;																			// static duration for all opacity transitions


geoprojection_scaling = svgwidth_abs*3.5;													// scaling factor for geo mapping projection
geoprojection_offset = [svgwidth_rel/2, svgheight_rel/2];			// offset value - determins where centre of map sits relative to SVG area

var 	color = 	d3
					.scaleQuantize()															// define colour choropleth range stylings
					.range(["#C0FDB5"
								,"#ACEEA2"
								,"#98E090"
								,"#84D27D"
								,"#70C46B"
								,"#5CB658"
								,"#48A846"
								,"#349A33"
								,"#208C21"
								,"#0C7E0F"]);


var div = d3.select("body").append("div")					// Define tooltipping div
   .attr("class", "tooltip")
   .style("opacity", 0);

// ---------------------------------------------------------------------------------------------------------------------
// WAIT 2 SECONDS THEN GET DATA + LOAD
// --------------------------------------------------------------

function Initialise()
{
	d3.select("p").classed("hidden",false);

	 setTimeout(function () {

		 getMapDatasets();
		 d3.select("p").classed("hidden",true);
        }
    ,
		  inittime);
}


}




// ---------------------------------------------------------------------------------------------------------------------
// DRAW EVERYTHING - INIT LOAD WITHOUT DATA
// --------------------------------------------------------------

function DataLoad(UKData,TownsData)															// load data and variables needed on load
{

	// VARIABLES FUNCS ------------------------

var 	svg =				d3
								.select("body")															// define svg area plot
								.append("svg")
								.attr("width",svgwidth_rel)
								.attr("height",svgheight_rel)
									;

var 	g = 				svg
								.append("g")															// define g layer plotting function
									;

var 	layer =			g
								.attr("class","geo-layers")
								.selectAll(".layer")							// create individual element layers in svg (for UK map)
								.data(UKData.features)
								.enter()
								.append("g")
								.attr("class","layer")
									;


var	mapcentre =		d3
								.geoCentroid(UKData);												// define map centre position base don UK GEOJSON file

var 	projection =	d3
								.geoMercator()														// Define UK map projection / scaling
								.center(mapcentre)												// defines what the centrepoint of the UK geoJSON files are
								.scale(geoprojection_scaling)									// defines the scaling of data files
								.translate(geoprojection_offset)								// defines where to place
								;

var 	path = 			d3
								.geoPath()
								.projection(projection);									//Define path generator for UK map

var 	circles=			g
								.attr("class","circles")														// define circles for data points
								.selectAll("circle")
								.data(TownsData)
							   .enter()
							   .append("circle")
								.attr("visibility","visible")
									;


		layer
				.append("path")														// append polygons to individual g elements within main svg element
				.attr("d", path)
				.attr("stroke", "black")
				.attr("stroke-width", 0.2)
				.style("fill",function(d)								// define the color of county polygons from the total population of each
					{
						return "#ccc";
					})																		// then bring back a value from the colour domain defined previously
						;

	// CIRCLE GENERATION FOR TOWN DATA POINTS
	// ------------------------------------------

var 	maxpop =	d3.max(TownsData,function(d){return parseInt(d.Population);});		// defines the maximum individual town population
																											// so r value for circles doesnt get ridiculous

		circles
			.attr("cx", 	function(d){return 	Math.random()*300	;} )			// create circles based on lat and long co-ords
			.attr("cy",		function(d){return 	Math.random()*300	;} )
			.attr("r", 		function(d){return 	Math.random()*50	;} )		// max popualtion determines r size
			.attr("fill","purple")
			.attr("opacity",0)
				;

UpdateData();

}



// ---------------------------------------------------------------------------------------------------------------------
// GET DATA SETS AND UPDATE
// --------------------------------------------------------------

function UpdateData()
{

	d3.json(datasetUK
	,function(error,UKData)
		{
		if(error)	{console.log("init UK Data load error")}
		else
			{

			d3.json(datasetTowns
				,function(error,TownsData)
					{
					if(error)	{console.log("init Towns Data load error")}
					else			{ApplyUpdate(UKData,TownsData);}
					})
			}
		})

}

// ---------------------------------------------------------------------------------------------------------------------
// PERFORM CIRCLES UPDATE
// --------------------------------------------------------------

function ApplyUpdate(UKData,TownsData)
{

	// LOCAL VARIABLE DEFINITIONS
	// ------------------------------------------


var 	svgsel = 		d3.select("svg");																// select everything in the svg plot

var	body =			d3.select("body");

var	mapcentre = 	d3.geoCentroid(UKData);													// redefine map centre position base don UK GEOJSON file

var 	projection = 	d3.geoMercator()															// redefine UK map projection / scaling
								.center(mapcentre)														// defines what the centrepoint of the UK geoJSON files are
								.scale(geoprojection_scaling)											// defines the scaling of data files
								.translate(geoprojection_offset)										// defines where to place
								;

var 	path =			d3.geoPath()
								.projection(projection);										// redefine path generator for UK map


var 	maxpop =			d3.max(TownsData,function(d){return parseInt(d.Population);});		// defines the maximum individual town population

	// CIRCLE TRANSITIONS
	// ------------------------------------------

		svgsel
				.selectAll("circle")																				// Transitions on NEW circles
				.data(TownsData)
				.transition()
				.delay(init_tran_duration/20)
				.duration(init_tran_duration)
				.attr("visibility","visible")
				.attr("cx", 	function(d){return 	projection([d.lng,d.lat])[0]	;} )
				.attr("cy",		function(d){return 	projection([d.lng,d.lat])[1]	;} )
				.attr("r", 		function(d){return 	(parseInt(d.Population)*7/maxpop);} )
				.attr("fill","blue")
				.attr("opacity",opacitycirclesmax)
					;

	// CHOROPLETH TRANSITIONS
	// ------------------------------------------

		for 	(var j = 0;	j < UKData.features.length;j++) // RUN THROUGH UK + TOWN DATA SETS TO PRODUCE NEW TOTAL POP AND NUMBER OF TOWN VARIABLES
				{
																									// loop through once for each key in the GEO JSON data
					var geoMember = UKData.features[j].properties.NAME_1;			// pull out the county/town name from GEO JSON data
					dataIter = 0;																// dataIter value set to 0
					z = 0;
					for (var i = 0; i < N_Towns; i++)						// Loop through once for Town data value
							{
								dataValue = 0;													// define and set to 0 for iterative loop
							var dataTown = TownsData[i].Town;							// Grab string values from Towns data
							var dataCounty = TownsData[i].County;						// Grab string values from Towns data
							var dataValue = parseFloat(TownsData[i].Population);	//Grab data value, and convert from string to float

										if (dataTown == geoMember ) 						// if Town - not County
										{

											UKData.features[j].properties.value = dataValue ;			// Copy the data value into the JSON properties array
											UKData.features[j].properties.Cat = "Town"	;				// set Cat in properties array to Town
											z = z+1;
											UKData.features[j].properties.NumbTowns = z;					// town counter + 1
											dataIter = dataIter + dataValue;									// iterative sum of population
											UKData.features[j].properties.TotalPop = dataIter;			//SET TOTAL POPULATION = Iterative sum value
										}
										else
										{
											if (dataCounty == geoMember)					// if County - not Town
											{
												if (dataValue != 0 )							// and population is not 0
												{
													UKData.features[j].properties.value = dataValue	;	// Copy the data value into the JSON properties array
													UKData.features[j].properties.Cat = "County";		// set Cat in properties array to County
													z = z+1;
													UKData.features[j].properties.NumbTowns = z;			// town counter + 1
													dataIter = dataIter + dataValue;							// iterative sum of population
													UKData.features[j].properties.TotalPop = dataIter;	//SET TOTAL POPULATION = Iterative sum value
												}
											}
											else
											{														// otherwise do nothing
											}
										}
							}

							var NestedCounties = d3.nest()								// nest (group the data)...
							.key(	function(d)	{return 	d.NAME_1; 	})					// ... using County / Town name as keys
							.sortKeys(d3.ascending)											// sort - does it need it??
							.rollup(	function(d)												// create aggregate values for nested keys
							{
								return{
								TOTAL:d3.sum(d,function(d) { return dataIter;}),	// bring back the iterative sum of population - DO I NEED d3.SUM HERE?
								COUNT:z															// counter - not exactly working properly
								};
							})
							.entries([UKData.features[j].properties]);				// BIND DATA TO THE NESTING FUNCTION


					if (MaxCountyPop < UKData.features[j].properties.TotalPop)		// loop through all values of total population...
					{
						MaxCountyPop = UKData.features[j].properties.TotalPop;		// keep the biggest one...
					}

				}

		color													// CHANGE COLOR DOMAIN FOR TRANSITION ON THE CHOROPLETH COLOURS
				.domain([0,MaxCountyPop]);

		svgsel														// DO TRANSITION ON THE CHOROPLETH COLOURS
			.selectAll("path")
			.data(UKData.features)
			.transition()
			.duration(init_tran_duration+1000)
			.style("fill",function(d)
			{
				var value = d.properties.TotalPop;
				if (value)
				{
					return color(value);
				}
				else
				{
					return "#ccc";
				}
			})
				;

// LAYERS INTERACTIVTY
// ------------------------------------------

		body
			.selectAll(".layer")
			.on("click", function(d,i)																		// mouseover county shows tooltip
			{
				mousex = d3.mouse(this)[0]
				mousey = d3.mouse(this)[1]

			//change layer opacity

				d3.selectAll(".layer")
					.attr("opacity", 	function(d,j){return j != i ? opacitycounties_min : opacitycounties_max;})
						;

					// change circle opacity

				d3.selectAll("circle")
					.attr("opacity",opacitycirclesmin);


				// tooltip -- WHY IS THIS NOT WORKING??

				d3.select("#tooltip").classed("hidden", false)
					.style("opacity",1)
					.style("left", mousex + tooltippadding*gr)
					.style("top", mousey - tooltippadding)
					.html(function(UKData)
						{
							return (" County: " + d.properties.NAME_1 + "<br>"
								+ " Population: " + parseInt(d.properties.TotalPop) + "<br>"
								+ " Number of Towns: " + parseInt(d.properties.NumbTowns)
								)
						;})

			// end of layer interactivity

			})

			.on("mouseout", function(d,i)																	// moving mouse outside of county area hides tooltip
			{
				svgsel.selectAll(".layer")
				.attr("opacity",opacitycounties_max);

				d3.select("#tooltip")																		// Selects tooltip div region from body of html
				.classed("hidden", true);

				svgsel.selectAll("circle")
				.attr("opacity",opacitycirclesmax);

			})
			;

// CIRCLES INTERACTIVTY
// ------------------------------------------

		body
			.selectAll("circle")
			.on("click",function(d,i)																		// clicking on a circle dims all the other circles
			{
				mousex = d3.mouse(this)[0]
				mousey = d3.mouse(this)[1]

				d3.selectAll("circle")
				.attr("opacity",function(d,j)
				{
					return j != i ? opacitycirclesmin : opacitycirclesmax;
				});

				d3.select("#tooltip")															// Selects tooltip div region from body of html
				.classed("hidden", false)
				.style("left", mousex + tooltippadding*gr)
				.style("top", mousey - tooltippadding)
				.html(function(TownsData)
						{
							return (" Town: " + d.Town  + "<br>"
								+ " County: " + d.County  + "<br>"
								+	"Longtitude: " + [d.lng] + "<br>"
								+ " Latitude: " + [d.lat]  + "<br>"
								+ " Population: " + d.Population
								)
						;})

			})

			.on("mouseout",function()																		// moving mouse after circle click shows all other circles
			{
				d3.selectAll("circle")
				.attr("opacity",opacitycirclesmax);

				d3.select("#tooltip")															// Selects tooltip div region from body of html
				.classed("hidden", true);
			})
			;
Refresh()

}																												// END OF UPDATE FUNCTION


// ---------------------------------------------------------------------------------------------------------------------
// WAIT 5 SECONDS THEN REFRESH DATA
// --------------------------------------------------------------

function Refresh()
{
	setTimeout(	function () {	UpdateData()	;}	, refreshtime	);
}

window.onload = Initialise();
